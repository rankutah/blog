/* ========== 1) Tailwind v4 layers (uses tailwind.config.cjs) ========== */
@import "tailwindcss";

/* ========== 2) Flowbiteâ€™s shipped CSS (shadows, transitions, etc.) ========== */
@import "flowbite/dist/flowbite.css";

@plugin "@tailwindcss/typography";
@plugin "flowbite/plugin";

/* ========== 3) PaperMod/menu tweak (safe to remove if/when you drop PaperMod) ========== */
.header .nav #menu li > a > span + svg,
.header .nav #menu li > a svg.ml-1.inline-block.flex-shrink-0 {
  display: none !important;
}

/* Make list markers match the current text color */
.prose :where(ul > li)::marker { color: currentColor; }
.prose :where(ol > li)::marker { color: currentColor; }

/* ========== 4) Typography touch-ups ========== */
/* .prose a { text-decoration: none; } */
.prose img { max-width: 100%; height: auto; }

/* ========== 5) Fluid auto-fit grid (no breakpoints) ========== */
/* Auto-fit columns with independent column/row gaps */
.cols-auto{
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--min, 16rem), 1fr));
  column-gap: var(--gap, 1.5rem);             /* X gap */
  row-gap: var(--row, var(--gap, 1.5rem));    /* Y gap defaults to X gap */
  align-items: var(--v, start);               /* start | center | end | stretch */
}
.cols-auto.v-center  { --v: center; }
.cols-auto.v-end     { --v: end; }
.cols-auto.v-stretch { --v: stretch; }


/* ========== 6) Universal text alignment (handy inside .prose) ========== */
.left, .prose .left     { text-align: left;  display: block; margin-inline: 0; }
.center, .prose .center { text-align: center; display: block; margin-inline: auto; }
.right, .prose .right   { text-align: right; display: block; margin-left: auto; margin-right: 0; }

/* ========== 7) Vertical alignment inside a box (section/stack use these) ========== */
.vtop    { display: flex; flex-direction: column; justify-content: flex-start; min-height: 100%; }
.vcenter { display: flex; flex-direction: column; justify-content: center;      min-height: 100%; }
.vbottom { display: flex; flex-direction: column; justify-content: flex-end;    min-height: 100%; }

/* Per-item vertical alignment (for children in grid/flex rows) */
.self-vtop    { align-self: flex-start; }
.self-vcenter { align-self: center; }
.self-vbottom { align-self: flex-end; }

/* Convenience */
.center-block { display: block; margin-inline: auto; }
.centerable   { display: block; }
.center .centerable { margin-inline: auto; }
.right  .centerable { margin-left: auto; }

/* ========== 8) NEW: item centering knobs (grid OR flex) ========== */
/* On containers */
.ji-left    { justify-items: start; }
.ji-center  { justify-items: center; }
.ji-right   { justify-items: end; }
.ji-stretch { justify-items: stretch; }

.ai-top     { align-items: start; }
.ai-center  { align-items: center; }
.ai-end     { align-items: end; }
.ai-stretch { align-items: stretch; }

/* On individual items (grid) */
.self-left    { justify-self: start; }
.self-center  { justify-self: center; }
.self-right   { justify-self: end; }
.self-stretch { justify-self: stretch; }
.self-top     { align-self: start; }
.self-end     { align-self: end; }



@layer utilities {
  /* keep link-brand behavior simple; JS sets the actual color inline */
  a.link-brand { text-decoration: underline; }
  a.link-brand:hover { text-decoration: underline; }
}

/* Ensure prose H1 uses the same vertical rhythm as H2 (some themes reset H1 margins) */
.prose h1 { margin-top: 0; margin-bottom: 0.5em; }
.prose h1 + p { margin-top: 0.25em; }

/* Compensate for the sticky header so the first page element isn't hidden/too close to the nav */
/* Default top spacing to clear a sticky header */
main#content { padding-top: 4rem; }

/* If the page starts with a full-bleed hero/section, remove the extra padding so the hero sits flush under the nav.
   Use :has() in supporting browsers for automatic detection; fallback is the manual `.no-top-pad` class on main. */
@supports selector(:has) {
  /* common patterns: a top-level .hero, a section with .bleed, or a relative block with a full-width image */
  main#content:has(> .hero),
  main#content:has(> .section.bleed),
  main#content:has(> .relative > img),
  main#content:has(> .relative > picture) {
    padding-top: 0;
  }
}

/* Manual override for pages that should start flush under the navbar */
main#content.no-top-pad { padding-top: 0 !important; }

/* ========== Contact form placeholders & checkbox (unified) ========== */
/* Scoped to .cp-contact so it only affects forms that use that class. */
.cp-contact input[type="text"]::placeholder,
.cp-contact input[type="email"]::placeholder,
.cp-contact input[type="tel"]::placeholder,
.cp-contact input[type="search"]::placeholder,
.cp-contact input[type="url"]::placeholder,
.cp-contact input[type="password"]::placeholder,
.cp-contact textarea::placeholder {
  color: #9ca3af !important; /* lighter placeholder */
  opacity: 1 !important;
}

.cp-contact input[type="text"],
.cp-contact input[type="email"],
.cp-contact input[type="tel"],
.cp-contact input[type="search"],
.cp-contact input[type="url"],
.cp-contact input[type="password"],
.cp-contact textarea {
  color: #111827 !important;
}

/* Dark mode: make entered text light so it's legible against dark backgrounds */
.dark .cp-contact input[type="text"],
.dark .cp-contact input[type="email"],
.dark .cp-contact input[type="tel"],
.dark .cp-contact input[type="search"],
.dark .cp-contact input[type="url"],
.dark .cp-contact input[type="password"],
.dark .cp-contact textarea {
  color: #f8fafc !important; /* near-white for input text in dark mode */
}

/* Dark mode placeholders (class) */
.dark .cp-contact input[type="text"]::placeholder,
.dark .cp-contact input[type="email"]::placeholder,
.dark .cp-contact input[type="tel"]::placeholder,
.dark .cp-contact input[type="search"]::placeholder,
.dark .cp-contact input[type="url"]::placeholder,
.dark .cp-contact input[type="password"]::placeholder,
.dark .cp-contact textarea::placeholder {
  color: #9ca3af !important; /* softened placeholder in dark mode */
  opacity: 1 !important;
}

/* Dark mode placeholders (OS-level) */
@media (prefers-color-scheme: dark) {
  .cp-contact input[type="text"]::placeholder,
  .cp-contact input[type="email"]::placeholder,
  .cp-contact input[type="tel"]::placeholder,
  .cp-contact input[type="search"]::placeholder,
  .cp-contact input[type="url"]::placeholder,
  .cp-contact input[type="password"]::placeholder,
  .cp-contact textarea::placeholder {
    color: #9ca3af !important;
    opacity: 1 !important;
  }

  .cp-contact input[type="text"],
  .cp-contact input[type="email"],
  .cp-contact input[type="tel"],
  .cp-contact input[type="search"],
  .cp-contact input[type="url"],
  .cp-contact input[type="password"],
  .cp-contact textarea {
    color: #f8fafc !important;
  }
}

/* Vendor-prefixed fallbacks */
.cp-contact input[type="text"]::-webkit-input-placeholder,
.cp-contact input[type="email"]::-webkit-input-placeholder,
.cp-contact input[type="tel"]::-webkit-input-placeholder,
.cp-contact input[type="search"]::-webkit-input-placeholder,
.cp-contact input[type="url"]::-webkit-input-placeholder,
.cp-contact input[type="password"]::-webkit-input-placeholder,
.cp-contact textarea::-webkit-input-placeholder { color: #9ca3af !important; opacity: 1 !important; }
.cp-contact input[type="text"]::-moz-placeholder,
.cp-contact input[type="email"]::-moz-placeholder,
.cp-contact input[type="tel"]::-moz-placeholder,
.cp-contact input[type="search"]::-moz-placeholder,
.cp-contact input[type="url"]::-moz-placeholder,
.cp-contact input[type="password"]::-moz-placeholder,
.cp-contact textarea::-moz-placeholder { color: #9ca3af !important; opacity: 1 !important; }

/* Checkbox accent + fallback */
.cp-contact input[type="checkbox"] { accent-color: currentColor !important; }
.cp-contact input[type="checkbox"]:checked { background-color: currentColor !important; border-color: currentColor !important; }
